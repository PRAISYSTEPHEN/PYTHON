
from abc import abstractmethod,ABC
class BMW(ABC):
    def __init__(self,make,model,year):
        self.make=make
        self.model=model
        self.year=year
        
    @abstractmethod
    def start(self):
        print("Starting the car")
        
    @abstractmethod
    def stop(self):
        print("Stopping the car")
    
    @abstractmethod
    def drive(self):
        pass
        
class ThreeSeries(BMW):
    def __init__(self,cruiseControlEnabled,make,model,year):
        BMW.__init__(self,make,model,year)
        self.cruiseControlEnabled=cruiseControlEnabled
        
    def display(self):
        print(self.cruiseControlEnabled)
        
    def start(self):
        super().start()
        print("Button start")
        
    def stop(self):
        super().stop()
        print("Button stop")
        
    def drive(self):
        print("Three series is being driven")
        
class FiveSeries(BMW):
    def __init__(self,parkingAssistEnabled,make,model,year):
        BMW.__init__(self,make,model,year)
        self.parkingAssistEnabled=parkingAssistEnabled
    
    def display(self):
        print(self.parkingAssistEnabled)
        
    def start(self):
        super().start()
        print("Remote start")
        
    def stop(self):
        super().stop()
        print("Remote stop")
        
    def drive(self):
        print("Five series is being driven")
        
threeSeries=ThreeSeries(True,"BMW","328i","2018")
print(threeSeries.cruiseControlEnabled)
print(threeSeries.make)
print(threeSeries.model)
print(threeSeries.year)

threeSeries.start()
threeSeries.stop()
threeSeries.display()
threeSeries.drive()

        
fiveSeries=FiveSeries(True,"BMW","528i","2018")
print(fiveSeries.parkingAssistEnabled)
print(fiveSeries.make)
print(fiveSeries.model)
print(fiveSeries.year)

fiveSeries.start()
fiveSeries.stop()
fiveSeries.display()
fiveSeries.drive()
        
